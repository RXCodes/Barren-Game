[gd_scene load_steps=16 format=3 uid="uid://1m47f1qmoc5v"]

[ext_resource type="Script" path="res://ModelContents/EntityRenderer.gd" id="1_8l233"]
[ext_resource type="Texture2D" uid="uid://d2qcvkjk1aqk3" path="res://ModelContents/Shadow.png" id="3_os0n6"]
[ext_resource type="Texture2D" uid="uid://dkpps3q1nmmro" path="res://ModelContents/Dummy/Base.png" id="4_e8bl2"]
[ext_resource type="Texture2D" uid="uid://c2le345d36g4p" path="res://ModelContents/Dummy/Body.png" id="5_54ymu"]
[ext_resource type="Texture2D" uid="uid://bhxd72k2ycswe" path="res://ModelContents/Dummy/Head.png" id="6_i1ai0"]

[sub_resource type="GDScript" id="GDScript_f04vc"]
script/source = "class_name EnemyAITest extends Node2D

@export_category(\"Enemy Info\")

## The user-facing name of this enemy
@export var enemyName: String = \"Dummy\"

## The maximum HP that the enemy starts with
@export var maxHealth: int = 100
var currentHealth: float

## The hitbox body of this enemy (what detects attacks)
@export var hitBoxRigidBody: RigidBody2D

## The collision body of this enemy (what interacts with physical bodies)
@export var collisionRigidBody: RigidBody2D
static var enemyAIKey = \"EnemyAI\"

@export_category(\"Behaviors\")

## Does the enemy do anything?
@export var hasAI: bool = false

## Speed when enemy travels
@export var walkMovementSpeed: float = 1

## Preferred distance the enemy should be to the target
@export var targetDistance: float = 30

@export_subgroup(\"Attacks\")

@export var attacks: Array[EnemyAttack]

@export_subgroup(\"\")
@export_subgroup(\"Gun\")

## The enemy attacks by using a gun
@export var gunAttacksEnabled: bool = false

## What gun does the enemy use?
@export var gun: String = \"Shotgun\"

## Where's the gun that the enemy is holding? (required)
@export var gunSprite: Sprite2D

@export_subgroup(\"\")
@export_category(\"Animations\")

## Animation player for walking, idle and death animations
@export var mainAnimationPlayer: AnimationPlayer

## Animation to play when walking
@export var walkAnimation: String

## Animation to play when idling
@export var idleAnimation: String

## Animation to play when dying
@export var deathAnimation: String

## Animation player for when  or is hit
@export var actionAnimationPlayer: AnimationPlayer

## Animation to play when being hit from the front
@export var hitFrontAnimation: String

## Animation to play when being hit from the back
## -- will reuse front animation if left blank
@export var hitBackAnimation: String

@export_category(\"Visuals\")

## Offset where damage number is displayed
@export var damageIndicatorPositionOffset: Vector2 = Vector2.ZERO

# Called when the node enters the scene tree for the first time.
var navigationAgent: NavigationAgent2D
var hitboxShape: Node2D
var hitboxShapeInitialPosition: Vector2
var flipTransform: Node2D
var target: Node2D = Player.current
func _ready() -> void:
	renderer = get_parent()
	navigationAgent = find_child(\"NavigationAgent2D\")
	flipTransform = find_child(\"FlipTransform\")
	hitboxShape = hitBoxRigidBody.get_children()[0]
	enemies.append(self)
	hitboxShapeInitialPosition = hitboxShape.position
	currentHealth = maxHealth
	if not hitBoxRigidBody:
		hitBoxRigidBody = find_child(\"Hitbox\")
	if hitBoxRigidBody:
		hitBoxRigidBody.set_meta(EnemyAI.enemyAIKey, self)
	if hitBackAnimation.is_empty():
		hitBackAnimation = hitFrontAnimation
	navigationAgent.target_reached.connect(reachedTarget)
	var children = NodeRelations.getChildrenRecursive(self)
	for child: Node in children:
		child.set_meta(EnemyAI.parentControllerKey, self)
	await get_tree().physics_frame
	onStart()

# Called every frame. 'delta' is the elapsed time since the previous frame.
var flipX = false
func _process(delta: float) -> void:
	flipTransform.scale.x = -1 if flipX else 1
	if renderer.material is ShaderMaterial:
		renderer.material.set_shader_parameter(\"normalizedRandom\", randf_range(0.6, 1.0))
	runNavigationQueue()
	if not damageInTick.is_empty():
		for nodeRid in damageInTick.keys():
			var damageIndicatorPosition = collisionRigidBody.global_position
			damageIndicatorPosition += damageIndicatorPositionOffset
			damageIndicatorPosition.x += randfn(0, 15)
			damageIndicatorPosition.y += randfn(0, 20)
			var damageValue = damageInTick[nodeRid]
			DamageIndicator.createDamageIndicator(damageIndicatorPosition, damageValue, instance_from_id(nodeRid))
		damageInTick.clear()

static var flashWhiteShader = preload(\"res://ModelContents/EntityFlashWhite.gdshader\")
var renderer: EntityRender

# called when enemy is hit
func onHit(globalPosition: Vector2) -> void:
	if dead:
		return
	var random = Vector2(randfn(0, 10), randfn(0, 10))
	HitParticle.spawnParticle(globalPosition + random, z_index + 30)
	flashWhite(true)
	if actionAnimationPlayer:
		actionAnimationPlayer.stop()
		var directionVector = globalPosition - collisionRigidBody.global_position
		if directionVector.x > 0 == not flipX:
			actionAnimationPlayer.play(hitFrontAnimation)
		else:
			actionAnimationPlayer.play(hitBackAnimation)
	await TimeManager.wait(0.05)
	flashWhite(false)

# called when enemy is damaged
var damageInTick := {}
func damage(amount: float, source: Node2D) -> void:
	if dead:
		return
	if not damageInTick.has(source.get_instance_id()):
		damageInTick[source.get_instance_id()] = 0
	damageInTick[source.get_instance_id()] += amount
	currentHealth -= amount
	if currentHealth <= 0:
		currentHealth = 0
		kill()

# called when changing the flashing state of the enemy
func flashWhite(flashing: bool) -> void:
	if flashing:
		renderer.material = ShaderMaterial.new()
		renderer.material.shader = flashWhiteShader
	else:
		renderer.material = null

# called on every physics tick
var shapeTests: Array[ShapeIntersectionTest] = []
func _physics_process(delta: float) -> void:
	hitboxShape.global_position = collisionRigidBody.global_position + hitboxShapeInitialPosition
	if dead:
		return
	if hasAI:
		navigate()
		if shapeTests.size() > 0:
			var directPhysicsState = get_world_2d().direct_space_state
			for shapeTest in shapeTests:
				var intersectedShapes = directPhysicsState.intersect_shape(shapeTest.shapeQueryParameters)
				if intersectedShapes.size() > 1:
					intersectedShapes.pop_front()
					if shapeTest.onSuccess:
						shapeTest.onSuccess.call(intersectedShapes)
			shapeTests.clear()

# pathfinding and movement functionality
func navigate() -> void:
	navigationAgent.target_desired_distance = targetDistance
	if navigationAgent.is_navigation_finished():
		if mainAnimationPlayer:
			if mainAnimationPlayer.current_animation != idleAnimation:
				mainAnimationPlayer.stop()
				mainAnimationPlayer.play(idleAnimation)
		return
	if mainAnimationPlayer.current_animation != walkAnimation:
		mainAnimationPlayer.stop()
		mainAnimationPlayer.play(walkAnimation)
	var pathfindDirectionVector = collisionRigidBody.global_position.direction_to(navigationAgent.get_next_path_position())
	var movementVector = pathfindDirectionVector * walkMovementSpeed
	flipX = movementVector.x <= 0
	collisionRigidBody.move_and_collide(movementVector)

# called when enemy reaches its target and is ready to attack
func reachedTarget() -> void:
	if mainAnimationPlayer:
		mainAnimationPlayer.stop()
		mainAnimationPlayer.play(idleAnimation)
	onReachTarget()

# this prevents too many enemies pathfinding at once (laggy)
static var enemies := []
static var enemyQueueIndex = 0
static var maxPathfindLimit = 5
static var readyToRunNavigation = true
static var navigateQueueInterval = 0.05
static func runNavigationQueue() -> void:
	if not readyToRunNavigation:
		return
	readyToRunNavigation = false
	for i in range(maxPathfindLimit):
		enemyQueueIndex += 1
		if enemyQueueIndex >= enemies.size():
			enemyQueueIndex = 0
		var currentAI: EnemyAI = enemies[enemyQueueIndex]
		if currentAI.target:
			currentAI.navigationAgent.target_position = currentAI.target.global_position
	await TimeManager.wait(navigateQueueInterval)
	readyToRunNavigation = true

func findAttack(attackName: String) -> EnemyAttack:
	for enemyattack: EnemyAttack in attacks:
		if enemyattack.attackName == attackName:
			return enemyattack
	return EnemyAttack.new()

#                  #
# HELPER FUNCTIONS #
#                  #

# targets a node and starts pathfinding to it
func setTarget(targetNode: Node2D, targetDistance: float) -> void:
	target = targetNode
	targetDistance = targetDistance
	navigationAgent.target_position = target.global_position

# performs an attack, playing an animation
# you should override the onAttack() function to have the enemy deal damage or do additional things
var canAttack = true
func attack(attackName: String) -> void:
	if not canAttack:
		return
	canAttack = false
	var enemyAttack = findAttack(attackName)
	onAttack(attackName)
	actionAnimationPlayer.play(enemyAttack.animationName)
	var attackTime = max(enemyAttack.attackTime, 0.05)
	await TimeManager.wait(attackTime)
	canAttack = true
	onAttackFinished()

# checks if the enemy is within the range of the target
func withinRangeOfTarget() -> bool:
	return navigationAgent.is_target_reached()

var dead = false
# kills the enemy - setting dead to true
func kill() -> void:
	if dead:
		return
	dead = true
	hitBoxRigidBody.collision_mask = 0
	hitBoxRigidBody.collision_layer = 0
	collisionRigidBody.collision_mask = 0
	collisionRigidBody.collision_layer = 0
	hasAI = false
	actionAnimationPlayer.stop()
	mainAnimationPlayer.stop()
	mainAnimationPlayer.play(deathAnimation)
	await TimeManager.wait(mainAnimationPlayer.current_animation_length)
	for i in range(3):
		flashWhite(true)
		await TimeManager.wait(0.05)
		flashWhite(false)
		await TimeManager.wait(0.05)
	flashWhite(true)
	await TimeManager.wait(0.05)
	DeathSmokeParticles.spawnParticle(collisionRigidBody.global_position, z_index)
	enemies.erase(self)
	get_parent().queue_free()

enum HurtBoxType {PLAYER, ENEMY, ALL}
static var parentControllerKey = \"ParentControllerKey\"
# checks if a shape intersects with other players and enemies, dealing damage
func activateHurtBox(shape: CollisionShape2D, damage: float, type: HurtBoxType) -> void:
	var newIntersectionTest = ShapeIntersectionTest.new()
	newIntersectionTest.setDetectionType(type)
	newIntersectionTest.setShape(shape.shape)
	newIntersectionTest.onSuccess = func(shapes):
		for targetShape: CollisionShape2D in shapes:
			var parent = targetShape.get_meta(parentControllerKey)
			if parent:
				parent.damage(damage)
	shapeTests.append(newIntersectionTest)
	
	# let's also make it flash so we can see it being activated in debug
	var originalDebugColor = shape.debug_color
	shape.debug_color = Color(1, 1, 1, 0.6)
	await TimeManager.wait(0.1)
	shape.debug_color = originalDebugColor

#                                  #
# FUNCTIONS THAT CAN BE OVERRIDDEN #
#                                  #

# define what the enemy does on attack 
func onAttack(attackName: String) -> void:
	pass

# usually used to have the enemy do something after an attack
# proper usage: yield attackFinished
func onAttackFinished() -> void:
	pass

# define what the enemy does on start
func onStart() -> void:
	pass

# define what the enemy does when reaching its target
# proper usage: yield onReachTarget
func onReachTarget() -> void:
	pass

#            #
# Structures #
#            #

class EnemyAttack extends Resource:
	
	## The name to identify this attack in source code
	@export var attackName: String = \"Punch\"
	
	## The name of the animation to play on the Main Animation player for the attack
	@export var animationName: String = \"Punch\"
	
	## How long to wait before the enemy can attack again
	@export var attackTime: float = 0.5

class ShapeIntersectionTest:
	var shapeQueryParameters = PhysicsShapeQueryParameters2D
	var onSuccess: Callable
	
	func _init() -> void:
		shapeQueryParameters = PhysicsShapeQueryParameters2D.new()
		shapeQueryParameters.collide_with_bodies = true
		shapeQueryParameters.collide_with_areas = false
		setDetectionType(HurtBoxType.PLAYER)
	
	func setShape(newShape: Shape2D) -> void:
		shapeQueryParameters.shape = newShape
		shapeQueryParameters.transform = newShape.global_transform
	
	func setDetectionType(hurtboxType: HurtBoxType) -> void:
		if hurtboxType == HurtBoxType.PLAYER:
			shapeQueryParameters.mask = 2**(4-1)
		elif hurtboxType == HurtBoxType.ENEMY:
			shapeQueryParameters.mask = 2**(3-1)
		elif hurtboxType == HurtBoxType.ALL:
			shapeQueryParameters.mask = (2**(4-1)) + (2**(3-1))
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_64nc2"]
radius = 15.0
height = 46.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_a2did"]
radius = 6.0
height = 15.0

[sub_resource type="Animation" id="Animation_qf741"]
resource_name = "Hit-Back"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("FlipTransform/Base:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [0.0698132, 0.0117163, -0.0254203, -0.0134583, 0.00617067, 0.0077297, 0.0, -0.00324994, -0.00109083, 0.0010003, 0.000794384, -0.000153939, -0.000385667, -6.47231e-05, 0.000140428, 7.4348e-05, 0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("FlipTransform/Base/Body:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667, 0.6, 0.633333, 0.666667, 0.7, 0.733333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [0.10472, 0.0443269, -0.0182391, -0.0390459, -0.0233428, 0.00103112, 0.0133035, 0.0107134, 0.00198537, -0.0040243, -0.00446416, -0.00163625, 0.000992038, 0.00171118, 0.00092037, -0.000132064, -0.00060192, -0.000439247, -5.13199e-05, 0.000190462, 0.000188571, 5.82171e-05, 0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("FlipTransform/Base/Body/Head:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667, 0.6, 0.633333, 0.666667, 0.7, 0.733333, 0.766667, 0.8, 0.833333, 0.866667, 0.9, 0.933333, 0.966667, 1),
"transitions": PackedFloat32Array(1.10957, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [-0.20944, -0.127341, -0.0229109, 0.0523599, 0.0781036, 0.0619909, 0.0261799, -0.00721648, -0.0252677, -0.0261799, -0.0159177, -0.00286386, 0.00654498, 0.00976295, 0.00774885, 0.00327249, -0.000902063, -0.00315847, -0.00327249, -0.00198971, -0.000357979, 0.000818123, 0.00122037, 0.0009686, 0.000409062, -0.000112752, -0.000394805, -0.000409062, -0.00024871, -4.47536e-05, 0.0]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("FlipTransform/Shadow:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667, 0.6, 0.633333, 0.666667, 0.7, 0.733333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector2(2.5, 23.5), Vector2(1.05823, 23.5), Vector2(-0.435426, 23.5), Vector2(-0.932151, 23.5), Vector2(-0.557269, 23.5), Vector2(0.0246162, 23.5), Vector2(0.317597, 23.5), Vector2(0.255763, 23.5), Vector2(0.0473974, 23.5), Vector2(-0.0960732, 23.5), Vector2(-0.106574, 23.5), Vector2(-0.0390625, 23.5), Vector2(0.0236831, 23.5), Vector2(0.0408514, 23.5), Vector2(0.0219722, 23.5), Vector2(-0.00315285, 23.5), Vector2(-0.0143697, 23.5), Vector2(-0.0104861, 23.5), Vector2(-0.00122523, 23.5), Vector2(0.00454688, 23.5), Vector2(0.00450182, 23.5), Vector2(0.00138974, 23.5), Vector2(0, 23.5)]
}

[sub_resource type="Animation" id="Animation_d470x"]
resource_name = "Hit-Front"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("FlipTransform/Base:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [-0.0523599, -0.00878721, 0.0190652, 0.0100937, -0.004628, -0.00579727, 0.0, 0.00243745, 0.000818123, -0.000750222, -0.000595788, 0.000115454, 0.000289251, 4.85424e-05, -0.000105321, -5.5761e-05, 0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("FlipTransform/Base/Body:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667, 0.6, 0.633333, 0.666667, 0.7, 0.733333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [-0.0872665, -0.0369391, 0.0151992, 0.0325382, 0.0194524, -0.000859265, -0.0110862, -0.00892781, -0.00165448, 0.00335359, 0.00372013, 0.00136354, -0.000826698, -0.00142598, -0.000766975, 0.000110053, 0.0005016, 0.000366039, 4.27666e-05, -0.000158718, -0.000157142, -4.85143e-05, 0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("FlipTransform/Base/Body/Head:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667, 0.6, 0.633333, 0.666667, 0.7, 0.733333, 0.766667, 0.8, 0.833333, 0.866667, 0.9, 0.933333, 0.966667, 1),
"transitions": PackedFloat32Array(1.10957, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [0.279253, 0.169788, 0.0305479, -0.0698132, -0.104138, -0.0826545, -0.0349066, 0.00962197, 0.0336903, 0.0349066, 0.0212235, 0.00381847, -0.00872665, -0.0130173, -0.0103318, -0.00436332, 0.00120275, 0.00421129, 0.00436332, 0.00265294, 0.000477305, -0.00109083, -0.00162716, -0.00129147, -0.000545415, 0.000150335, 0.000526407, 0.000545415, 0.000331613, 5.96715e-05, 0.0]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("FlipTransform/Shadow:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667, 0.6, 0.633333, 0.666667, 0.7, 0.733333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector2(-2.5, 23.5), Vector2(-1.05823, 23.5), Vector2(0.435426, 23.5), Vector2(0.932151, 23.5), Vector2(0.557269, 23.5), Vector2(-0.0246162, 23.5), Vector2(-0.317597, 23.5), Vector2(-0.255763, 23.5), Vector2(-0.0473974, 23.5), Vector2(0.0960732, 23.5), Vector2(0.106574, 23.5), Vector2(0.0390625, 23.5), Vector2(-0.0236831, 23.5), Vector2(-0.0408514, 23.5), Vector2(-0.0219722, 23.5), Vector2(0.00315285, 23.5), Vector2(0.0143697, 23.5), Vector2(0.0104861, 23.5), Vector2(0.00122523, 23.5), Vector2(-0.00454688, 23.5), Vector2(-0.00450182, 23.5), Vector2(-0.00138974, 23.5), Vector2(0, 23.5)]
}

[sub_resource type="Animation" id="Animation_bm7uj"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("FlipTransform/Base:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("FlipTransform/Base/Body/Head:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("FlipTransform/Shadow:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 23.5)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_3b64k"]
_data = {
"Hit-Back": SubResource("Animation_qf741"),
"Hit-Front": SubResource("Animation_d470x"),
"RESET": SubResource("Animation_bm7uj")
}

[sub_resource type="Animation" id="Animation_fkkh3"]
resource_name = "Death"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("FlipTransform/Base:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667, 0.6, 0.633333),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [0.0, -0.0326474, -0.13059, -0.293826, -0.522358, -0.816185, -1.17531, -1.5382, -1.35122, -1.22954, -1.17315, -1.18205, -1.25625, -1.39574, -1.53901, -1.47075, -1.46778, -1.53011, -1.5347, -1.55844]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("FlipTransform/Base/Body:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [0.0, 0.322536, 0.348469, 0.349066, 0.20457, 0.0962116, 0.00852806, -0.051566, -0.0602514, -0.0269145, -0.0304158, -0.0321195]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("FlipTransform/Shadow:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 0.466667, 0.5, 0.533333, 0.566667),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector2(-2.5, 23.5), Vector2(-2.59159, 23.5), Vector2(-2.86635, 23.5), Vector2(-3.32429, 23.5), Vector2(-3.9654, 23.5), Vector2(-4.78968, 23.5), Vector2(-5.79715, 23.5), Vector2(-5.59808, 23.5), Vector2(-5.27336, 23.5), Vector2(-5.13181, 23.5), Vector2(-5.17344, 23.5), Vector2(-5.39825, 23.5), Vector2(-5.80623, 23.5), Vector2(-5.85694, 23.5), Vector2(-5.78201, 23.5), Vector2(-5.89025, 23.5), Vector2(-5.95004, 23.5), Vector2(-6, 23.5)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("FlipTransform/Shadow:scale")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.566667),
"transitions": PackedFloat32Array(0.366022, 1),
"update": 0,
"values": [Vector2(0.7, 0.7), Vector2(0.85, 0.85)]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("FlipTransform/Base/Body/Head:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("FlipTransform/DetachedHead:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("FlipTransform/DetachedHead:position")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0, 0.0333333, 0.0666667, 0.1, 0.133333, 0.166667, 0.2, 0.233333, 0.266667, 0.3, 0.333333, 0.366667, 0.4, 0.433333, 1),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.594604, 0.594604),
"update": 0,
"values": [Vector2(1, -42), Vector2(3.47372, -37.2058), Vector2(7.5, -40.5), Vector2(13, -45), Vector2(14.8772, -34.9882), Vector2(16.7082, -25.2229), Vector2(18.4479, -15.9446), Vector2(20.0534, -7.38174), Vector2(21.4853, 0.254833), Vector2(22.7082, 6.77708), Vector2(23.6921, 12.0244), Vector2(24.4127, 15.8676), Vector2(24.8523, 18.2121), Vector2(25, 19), Vector2(28, 19)]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("FlipTransform/DetachedHead:rotation")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(0.287175, 1),
"update": 0,
"values": [0.0, 4.36332]
}

[sub_resource type="Animation" id="Animation_82ynv"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("FlipTransform/Base:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("FlipTransform/Base/Body:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("FlipTransform/Shadow:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(-2.5, 23.5)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("FlipTransform/Shadow:scale")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0.7, 0.7)]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("FlipTransform/Base/Body/Head:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("FlipTransform/DetachedHead:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("FlipTransform/DetachedHead:position")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(2, -36)]
}
tracks/7/type = "value"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("FlipTransform/DetachedHead:rotation")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_4vkjs"]
_data = {
"Death": SubResource("Animation_fkkh3"),
"RESET": SubResource("Animation_82ynv")
}

[node name="DummyRender" type="CanvasGroup"]
process_priority = 5
texture_filter = 1
script = ExtResource("1_8l233")
entityZIndexOffset = 24

[node name="Dummy" type="Node2D" parent="." node_paths=PackedStringArray("hitBoxRigidBody", "collisionRigidBody", "mainAnimationPlayer", "actionAnimationPlayer")]
script = SubResource("GDScript_f04vc")
hitBoxRigidBody = NodePath("Hitbox")
collisionRigidBody = NodePath("ColliderBox")
mainAnimationPlayer = NodePath("ColliderBox/FlipTransform/MainAnimationPlayer")
deathAnimation = "Death"
actionAnimationPlayer = NodePath("ColliderBox/FlipTransform/ActionAnimationPlayer")
hitFrontAnimation = "Hit-Front"
hitBackAnimation = "Hit-Back"
damageIndicatorPositionOffset = Vector2(0, -40)

[node name="Hitbox" type="RigidBody2D" parent="Dummy"]
collision_layer = 4
collision_mask = 0
gravity_scale = 0.0
lock_rotation = true
freeze = true

[node name="Shape" type="CollisionShape2D" parent="Dummy/Hitbox"]
z_index = -2
position = Vector2(0, -12)
scale = Vector2(2, 2)
shape = SubResource("CapsuleShape2D_64nc2")
debug_color = Color(0.984956, 0, 0.338532, 0.42)

[node name="ColliderBox" type="RigidBody2D" parent="Dummy"]
gravity_scale = 0.0
lock_rotation = true

[node name="Shape" type="CollisionShape2D" parent="Dummy/ColliderBox"]
z_index = -1
position = Vector2(0, 22)
rotation = 1.5708
scale = Vector2(2, 2)
shape = SubResource("CapsuleShape2D_a2did")
debug_color = Color(0, 0.648944, 0.163145, 0.42)

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="Dummy/ColliderBox"]
path_desired_distance = 30.0
target_desired_distance = 20.0
path_max_distance = 120.0
path_metadata_flags = 0
debug_enabled = true

[node name="FlipTransform" type="Node2D" parent="Dummy/ColliderBox"]

[node name="Shadow" type="Sprite2D" parent="Dummy/ColliderBox/FlipTransform"]
modulate = Color(1, 1, 1, 0.231373)
show_behind_parent = true
z_index = -1
texture_filter = 1
position = Vector2(-2.5, 23.5)
scale = Vector2(0.7, 0.7)
texture = ExtResource("3_os0n6")
offset = Vector2(0, -39.2243)

[node name="Base" type="Sprite2D" parent="Dummy/ColliderBox/FlipTransform"]
texture_filter = 1
position = Vector2(0, 24.5)
scale = Vector2(2, 2)
texture = ExtResource("4_e8bl2")
offset = Vector2(0, -24.5)

[node name="Body" type="Sprite2D" parent="Dummy/ColliderBox/FlipTransform/Base"]
texture_filter = 1
position = Vector2(0, -12.5)
texture = ExtResource("5_54ymu")
offset = Vector2(0, -6.5)

[node name="Head" type="Sprite2D" parent="Dummy/ColliderBox/FlipTransform/Base/Body"]
texture_filter = 1
position = Vector2(1, -18)
texture = ExtResource("6_i1ai0")
offset = Vector2(-1, 13.5)

[node name="DetachedHead" type="Sprite2D" parent="Dummy/ColliderBox/FlipTransform"]
visible = false
texture_filter = 1
position = Vector2(2, -36)
scale = Vector2(2, 2)
texture = ExtResource("6_i1ai0")
offset = Vector2(-0.5, 17.5)

[node name="ActionAnimationPlayer" type="AnimationPlayer" parent="Dummy/ColliderBox/FlipTransform"]
root_node = NodePath("../..")
libraries = {
"": SubResource("AnimationLibrary_3b64k")
}

[node name="MainAnimationPlayer" type="AnimationPlayer" parent="Dummy/ColliderBox/FlipTransform"]
root_node = NodePath("../..")
libraries = {
"": SubResource("AnimationLibrary_4vkjs")
}
